DROP TABLE lineas_facturas;
DROP TABLE facturas;
DROP TABLE productos;
DROP TABLE control_log;

CREATE TABLE facturas(
	cod_factura NUMBER,
	fecha DATE,
	descripcion VARCHAR2(100),
	CONSTRAINT pk_facturas PRIMARY KEY(cod_factura)
);

CREATE TABLE productos(
	cod_producto NUMBER,
	nombre_producto VARCHAR2(100),
	pvp NUMBER,
	total_vendido NUMBER,
	CONSTRAINT pk_productos PRIMARY KEY(cod_producto)
);

CREATE TABLE lineas_facturas(
	cod_factura NUMBER,
	cod_producto NUMBER,
	pvp NUMBER,
	unidades NUMBER,
	fecha DATE,
	CONSTRAINT fk_lineas_factura_facturas FOREIGN KEY (cod_factura) REFERENCES facturas(cod_factura),
	CONSTRAINT fk_lineas_factura_producto FOREIGN KEY (cod_producto) REFERENCES productos(cod_producto)
);

ALTER TABLE LINEAS_FACTURAS ADD CONSTRAINT pk_lineas_factura PRIMARY KEY(cod_factura, cod_producto);

--id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 100, -- solo funciona version 12c o superior
CREATE TABLE control_log(
	id NUMBER,
	cod_empleado VARCHAR2(30),
	fecha DATE,
	tabla_afectada VARCHAR2(50),
	cod_operacion CHAR(1)
);

DROP  SEQUENCE seq_control_log_id;
CREATE SEQUENCE seq_control_log_id
	START WITH 1
	MAXVALUE 999999999
	MINVALUE 1
	CYCLE
	NOCACHE
	NOORDER;

CREATE OR REPLACE TRIGGER trg_auto_inc_control_log_id
	BEFORE INSERT ON control_log
	FOR EACH ROW
	BEGIN
	IF INSERTING THEN
		IF :NEW.ID IS NULL THEN
			SELECT seq_control_log_id.nextval INTO :NEW.ID FROM dual;
		END IF;
	END IF;
END trg_auto_inc_control_log_id;


INSERT INTO CONTROL_LOG (id,COD_EMPLEADO, FECHA, TABLA_AFECTADA, COD_OPERACION) 
	VALUES (0,
		user,
		SYSDATE,
		'CONTROL_LOG',
		'I'
	);


CREATE OR REPLACE PACKAGE pkg_facturas IS
	FUNCTION  fn_existe( in_codigo_factura IN facturas.cod_factura%TYPE) RETURN  BOOLEAN;
	-- debe dar de alta una factura con los valores indicados en los parámetros también debe comprobar que no se duplica
	PROCEDURE pr_alta_factura (in_codigo_factura IN facturas.cod_factura%TYPE, in_fecha IN facturas.fecha%TYPE, in_descripcion IN facturas.descripcion%TYPE); 
	--ebe borrar la factura en indicada en el parámetro y también debe borrar las líneas de facturas asociadas a la tabla lineas_factura
	PROCEDURE pr_baja_factura (in_codigo_factura IN facturas.cod_factura%TYPE) ;
	--debe modificar la descripción de la factura que tenga el código del parámetro con la nueva descripción.
	PROCEDURE pr_mod_descri   (in_codigo_factura IN facturas.cod_factura%TYPE, in_descripcion IN facturas.descripcion%TYPE);
	--debe modificar la descripción de la factura que tenga el código del parámetro con la nueva fecha.
	PROCEDURE pr_mod_fecha    (in_codigo_factura IN facturas.cod_factura%TYPE, in_fecha IN facturas.fecha%TYPE); 
	FUNCTION fn_total_factura (in_codigo_factura IN facturas.cod_factura%TYPE) RETURN NUMBER;
	-- devuelve el número de facturas que hay entre esas fechas
	FUNCTION fn_num_facturas  (in_fecha_inicio IN facturas.fecha%TYPE, in_fecha_fin IN facturas.fecha%TYPE) RETURN NUMBER; 
END pkg_facturas;

CREATE OR REPLACE PACKAGE BODY pkg_facturas IS
	-- funcion existe
 	FUNCTION fn_existe (
        in_codigo_factura IN facturas.cod_factura%TYPE 
    ) RETURN BOOLEAN IS
        temp   facturas.cod_factura%TYPE;
    BEGIN
        SELECT cod_factura
        INTO temp
        FROM facturas
        WHERE cod_factura= in_codigo_factura;
        RETURN true;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN false;
        WHEN OTHERS THEN 
       		raise_application_error(-20000,'ERROR: '  || SQLCODE || ' Info: ' ||SQLERRM );
    END fn_existe;
   
	--procedimiento alta factura
	PROCEDURE pr_alta_factura (
	    in_codigo_factura IN facturas.cod_factura%TYPE,
	    in_fecha 		  IN facturas.fecha%TYPE,
	    in_descripcion    IN facturas.descripcion%TYPE
	) IS
	    is_existe  BOOLEAN;
	    erroryaexiste EXCEPTION;
	BEGIN
	     is_existe  := fn_existe(in_codigo_factura);
	    IF NOT  is_existe  THEN
	       INSERT INTO HR.FACTURAS
				(COD_FACTURA, FECHA, DESCRIPCION)
			VALUES (
	            in_codigo_factura,
	            in_fecha,
	            in_descripcion
	        );
	        COMMIT;
	        DBMS_OUTPUT.PUT_LINE('Se registro Factura: '|| in_codigo_factura );
	    ELSE
	        RAISE erroryaexiste;
	    END IF;
	EXCEPTION
	    WHEN erroryaexiste THEN
	        raise_application_error(-20001,'ERROR, ESE NUMERO DE FACTURA YA EXISTE, NO SE ADMITEN DUPLICADOS');
	    WHEN OTHERS THEN
	        raise_application_error(-20000,'ERROR: '  || SQLCODE || ' Info: ' ||SQLERRM );
	END pr_alta_factura;
	
	--procedimiento baja factura
	PROCEDURE pr_baja_factura (
	        in_codigo_factura IN facturas.cod_factura%TYPE
	    ) IS
	        devuelto   BOOLEAN;
	       	lineas_eliminadas NUMBER;
	        errornoexiste EXCEPTION;
	    BEGIN
	        devuelto := fn_existe(in_codigo_factura);
	        IF devuelto THEN
	        
	            DELETE FROM lineas_facturas 
	            WHERE cod_factura = in_codigo_factura;
	           
	           lineas_eliminadas :=  SQL%ROWCOUNT; 
	           
	            DELETE FROM facturas 
	            WHERE  cod_factura = in_codigo_factura;
	            COMMIT;
	           	DBMS_OUTPUT.PUT_LINE('Se elimino Factura: '|| in_codigo_factura);
	           	DBMS_OUTPUT.PUT_LINE('Se elimino ' || lineas_eliminadas || ' registroas asociados a la factura' );
	        ELSE
	            RAISE errornoexiste;
	        END IF;
	    EXCEPTION
	        WHEN errornoexiste THEN
	            raise_application_error(-20001,'ERROR, ESE NUMERO DE FACTURA NO EXISTE');
	        WHEN OTHERS THEN
	            raise_application_error(-20000,'ERROR: '  || SQLCODE || ' Info: ' ||SQLERRM );
	    END pr_baja_factura;
	
	 -- PROCEDIMIENTO MOD_ DECRI
	 PROCEDURE pr_mod_descri (
	    in_codigo_factura IN facturas.cod_factura%TYPE,
	    in_descripcion    IN facturas.descripcion%TYPE
	) IS
	    errornoexiste EXCEPTION;
	    devuelto BOOLEAN;
	BEGIN
	    devuelto := fn_existe(in_codigo_factura);
	    IF devuelto = true THEN
	        UPDATE facturas
	        SET descripcion = in_descripcion
	        WHERE cod_factura = in_codigo_factura;
	        COMMIT;
	       	DBMS_OUTPUT.PUT_LINE('Se actuliza descipcion de Factura: '|| in_codigo_factura);
	    ELSE
	        RAISE errornoexiste;
	    END IF;
	
	EXCEPTION
	    WHEN errornoexiste THEN
	        raise_application_error(-20001, 'ERROR, ESE NUMERO DE FACTURA NO EXISTE');
	    WHEN OTHERS THEN
	        raise_application_error(-20000,'ERROR: '  || SQLCODE || ' Info: ' ||SQLERRM );
	END pr_mod_descri; 
     
	--PROCEDIMIENTO MOD FECHA
	PROCEDURE pr_mod_fecha(
		in_codigo_factura 	IN facturas.cod_factura%TYPE,
		in_fecha			IN facturas.fecha%TYPE	
	)
	IS
	    devuelto BOOLEAN;
	    errornoexiste EXCEPTION;
	BEGIN
	    devuelto := fn_existe(in_codigo_factura);
	   
	    IF devuelto THEN
	        UPDATE facturas
	        SET fecha = in_fecha
	        WHERE cod_factura = in_codigo_factura;
	        COMMIT;
	        DBMS_OUTPUT.PUT_LINE('Se actuliza fecha de Factura: '|| in_codigo_factura);
	    ELSE
	        RAISE errornoexiste;
	    END IF;
	EXCEPTION
	    WHEN errornoexiste THEN
	        raise_application_error(-20001, 'ERROR, ESE NUMERO DE FACTURA NO EXISTE');
	    WHEN OTHERS THEN
	        raise_application_error(-20000,'ERROR: '  || SQLCODE || ' Info: ' ||SQLERRM );
	END  pr_mod_fecha;
		
	--FUNCION NUM FACTURAS
	FUNCTION fn_num_facturas  (
	    in_fecha_inicio IN facturas.fecha%TYPE,
	    in_fecha_fin    IN facturas.fecha%TYPE
	) RETURN NUMBER IS
	    conteo NUMBER := 0;
	BEGIN
	    SELECT COUNT(*)
	    INTO conteo
	    FROM facturas
	    WHERE fecha BETWEEN in_fecha_inicio AND in_fecha_fin;
	  	--FIXME: Aqui podemos correg datos
	    RETURN conteo;
	END fn_num_facturas;

	--FUNCION TOTAL FACTURA
	FUNCTION fn_total_factura (
       in_codigo_factura IN facturas.cod_factura%TYPE
    ) RETURN NUMBER IS
        total NUMBER;
    BEGIN
        SELECT SUM(pvp * unidades)
        INTO total
        FROM lineas_facturas
        WHERE cod_factura = in_codigo_factura;
       
       RETURN total;
    END fn_total_factura;
END pkg_facturas;


CREATE OR REPLACE PACKAGE pkg_linea_facturas  IS
	FUNCTION fn_existe (
		codigo_factura  IN lineas_facturas.cod_factura%TYPE,
		codigo_producto IN lineas_facturas.cod_producto%TYPE
	) RETURN BOOLEAN;

	PROCEDURE pr_alta_linea (
		codigo_factura  IN lineas_facturas.cod_factura%TYPE,
		codigo_producto IN lineas_facturas.cod_producto%TYPE,
		q_unidades 		IN lineas_facturas.unidades%TYPE,
		fecha_nueva 	IN lineas_facturas.fecha%TYPE
	);
	PROCEDURE pr_baja_linea (
		codigo_factura  IN lineas_facturas.cod_factura%TYPE,
		codigo_producto IN lineas_facturas.cod_producto%TYPE
	); --
	--PROCEDURE pr_mod_producto(cod_factura IN NUMBER, cod_producto IN NUMBER, parametro IN ); -- o Se trata de 2 métodos sobrecargados, es decir el segundo parámetro debe admitir los siguientes valores:
	PROCEDURE pr_mod_producto(
		codigo_factura  IN lineas_facturas.COD_FACTURA%TYPE ,
		codigo_producto IN lineas_facturas.COD_PRODUCTO%TYPE ,
		q_unidades    	IN lineas_facturas.UNIDADES%TYPE
	); --
	PROCEDURE pr_mod_producto(
	   codigo_factura  IN lineas_facturas.COD_FACTURA%TYPE,
	    codigo_producto IN lineas_facturas.COD_PRODUCTO%TYPE,
	    fecha_nueva     IN lineas_facturas.FECHA%TYPE 
	); -- o Por tanto, debe modificar o bien unidades si se le pasa un NUMBER o bien la fecha si se le pasa un DATE.
	FUNCTION fn_num_lineas (codigo_factura  IN lineas_facturas.cod_factura%TYPE) RETURN NUMBER; --, devuelve el número de líneas de la factura
END pkg_linea_facturas;

CREATE OR REPLACE PACKAGE BODY pkg_linea_facturas  IS
	--CREATE OR REPLACE
	FUNCTION fn_existe (
		codigo_factura  IN lineas_facturas.cod_factura%TYPE,
		codigo_producto IN lineas_facturas.cod_producto%TYPE
	) RETURN BOOLEAN IS
		temp lineas_facturas.cod_factura%TYPE;
	BEGIN
		SELECT cod_factura
		INTO temp
		FROM lineas_facturas
		WHERE
			cod_factura = codigo_factura
			AND cod_producto= codigo_producto;

		RETURN TRUE;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RETURN FALSE;
		WHEN OTHERS THEN
			   raise_application_error(-20000,'ERROR: '  || SQLCODE || ' Info: ' ||SQLERRM );
	END fn_existe;

	--CREATE OR REPLACE
	PROCEDURE pr_alta_linea (
	   codigo_factura  IN lineas_facturas.cod_factura%TYPE,
		codigo_producto IN lineas_facturas.cod_producto%TYPE,
		q_unidades 		IN lineas_facturas.unidades%TYPE,
		fecha_nueva 			IN lineas_facturas.fecha%TYPE
	) IS
	    devuelto BOOLEAN;
	    erroryaexiste EXCEPTION;
	    precio   NUMBER;
	BEGIN
	    devuelto := fn_existe(codigo_factura, codigo_producto);
	    IF NOT devuelto THEN
	        SELECT pvp
	        INTO precio
	        FROM productos
	        WHERE cod_producto = codigo_producto;
	
	      INSERT INTO LINEAS_FACTURAS (COD_PRODUCTO, COD_FACTURA, PVP, UNIDADES, FECHA) 
	      VALUES(codigo_producto, codigo_factura, q_unidades*precio, q_unidades, fecha_nueva);      
	       COMMIT;
	       DBMS_OUTPUT.PUT_LINE('Se inserto el registro a: ' || codigo_factura || ' del producto '|| codigo_producto );
	    ELSE
	        RAISE erroryaexiste;
	    END IF;
	
	EXCEPTION
	    WHEN erroryaexiste THEN
	        raise_application_error(-20001, 'ERROR, ESA FACTURA PRODUCTO YA EXISTE, NO SE ADMITEN DUPLICADOS');
	    WHEN no_data_found THEN
	        raise_application_error(-20002, 'ERROR, EL PRODUCTO NO EXISTE');
	    WHEN OTHERS THEN
	        raise_application_error(-20000,'ERROR: '  || SQLCODE || ' Info: ' || SQLERRM );
	END pr_alta_linea;

	--CREATE OR REPLACE
	--PROCEDIMIENTO BAJA LINEA
	PROCEDURE pr_baja_linea (
		codigo_factura  IN lineas_facturas.cod_factura%TYPE,
		codigo_producto IN lineas_facturas.cod_producto%TYPE
	) AS
		errornoexiste EXCEPTION;
		devuelto BOOLEAN;
	BEGIN
		devuelto := fn_existe(codigo_factura, codigo_producto);
		IF devuelto THEN
			DELETE FROM lineas_facturas
			WHERE
				cod_factura = codigo_factura
				AND cod_producto = codigo_producto;
			COMMIT;
			DBMS_OUTPUT.PUT_LINE('Se ha eliminado el producto ' || codigo_producto ||' de la factura ' ||  codigo_factura );
		ELSE
			RAISE errornoexiste;
		END IF;
	EXCEPTION
		WHEN errornoexiste THEN
			raise_application_error(-20001,'ERROR, ESE NUMERO DE FACTURA -PRODUCTO NO EXISTE');
		WHEN OTHERS THEN
			raise_application_error(-20000,'ERROR: '  || SQLCODE || ' Info: ' || SQLERRM );
	END pr_baja_linea;

	--CREATE  OR REPLACE 
	PROCEDURE pr_mod_producto (
	    codigo_factura  IN lineas_facturas.COD_FACTURA%TYPE ,
		codigo_producto IN lineas_facturas.COD_PRODUCTO%TYPE ,
		q_unidades    	IN lineas_facturas.UNIDADES%TYPE
	) IS
	    devuelto BOOLEAN;
	    errornoexiste EXCEPTION;
	BEGIN
	    devuelto := fn_existe(codigo_factura, codigo_producto);
	    IF devuelto THEN
	        UPDATE lineas_facturas a
	        SET
	            unidades = 	q_unidades,
	            pvp = (
	                SELECT pvp 
	                FROM productos
	                WHERE cod_producto = codigo_producto
	            ) *q_unidades
	        WHERE
	                cod_factura = codigo_factura
	            AND cod_producto = codigo_producto;
	        COMMIT;
	        DBMS_OUTPUT.PUT_LINE('Se modifica el registro a: ' || codigo_factura || ' del producto '|| codigo_producto || ' a ' || q_unidades || ' unidades');
	    ELSE
	        RAISE errornoexiste;
	    END IF;
	
	EXCEPTION
	    WHEN errornoexiste THEN
	        raise_application_error(-20001, 'ERROR, ESE NÃšMERO DE FACTURA NO EXISTE O LINEA DE FACTURA NO EXISTE');
	    WHEN OTHERS THEN
	        raise_application_error(-20000,'ERROR: '  || SQLCODE || ' Info: ' || SQLERRM );
	END pr_mod_producto;
	
	--CREATE  OR REPLACE 
	PROCEDURE pr_mod_producto (
	    codigo_factura  IN lineas_facturas.COD_FACTURA%TYPE,
	    codigo_producto IN lineas_facturas.COD_PRODUCTO%TYPE,
	    fecha_nueva     IN lineas_facturas.FECHA%TYPE 
	) IS
	    devuelto BOOLEAN;
	    errornoexiste EXCEPTION;
	BEGIN
	    devuelto := fn_existe(codigo_factura, codigo_producto);
	    IF devuelto THEN
	        UPDATE lineas_facturas
	        SET fecha = fecha_nueva
	        WHERE
	                cod_factura = codigo_factura
	            AND cod_producto = codigo_producto;
	
	        COMMIT;
	       	 DBMS_OUTPUT.PUT_LINE('Se modifica el registro a: ' || codigo_factura || ' del producto '|| codigo_producto || ' a  fecha ' || fecha_nueva );
	    ELSE
	        RAISE errornoexiste;
	    END IF;
	
	EXCEPTION
	    WHEN errornoexiste THEN
	        raise_application_error(-20001, 'ERROR, ESE NÃšMERO DE FACTURA NO EXISTE O LINEA DE FACTURA NO EXISTE');
	    WHEN OTHERS THEN
	          raise_application_error(-20000,'ERROR: '  || SQLCODE || ' Info: ' || SQLERRM );
	END pr_mod_producto;

	--CREATE  OR REPLACE 
	FUNCTION fn_num_lineas (
	    codigo_factura  IN lineas_facturas.COD_FACTURA%TYPE
	) RETURN NUMBER AS
	    conteo NUMBER := 0;
	BEGIN
	    SELECT COUNT(*)
	    INTO conteo
	    FROM lineas_facturas
	    WHERE cod_factura = codigo_factura;
	    RETURN conteo;
	END fn_num_lineas;

END pkg_linea_facturas;



--trigger para tabla facturas
CREATE OR REPLACE TRIGGER tr_facturas 
	BEFORE DELETE OR INSERT OR UPDATE ON facturas
	DECLARE
		operacion CHAR(1);
	BEGIN
	IF inserting THEN
		operacion := 'I';
	END IF;
	IF updating	THEN
		operacion := 'U';
	END IF;
	IF deleting	THEN
		operacion := 'D';
	END IF;
	INSERT INTO CONTROL_LOG (COD_EMPLEADO, FECHA, TABLA_AFECTADA, COD_OPERACION) 
	VALUES (
		user,
		SYSDATE,
		'FACTURA',
		operacion
	);
END tr_facturas;



---trigger para lineas facturas
CREATE OR REPLACE TRIGGER tr_lineas_facturas 
	BEFORE DELETE OR INSERT OR UPDATE ON lineas_facturas
	DECLARE
		operacion CHAR(1);
	BEGIN
	IF 	inserting THEN
		operacion := 'I';
	END IF;
	IF updating THEN
		operacion := 'U';
	END IF;
	IF 	deleting THEN
		operacion := 'D';
	END IF;
	INSERT INTO CONTROL_LOG (COD_EMPLEADO, FECHA, TABLA_AFECTADA, COD_OPERACION) 
	VALUES (
		user,
		SYSDATE,
		'LINEAS_FACTURA',
		operacion
	);
END tr_lineas_facturas;




-- ## Ejecucion

DECLARE
	id_factura NUMBER := 200;
	id_producto NUMBER :=1;
	existe BOOLEAN;

	registros NUMBER; 
	fecha_original DATE:= TO_DATE('2020-04-20','YYYY-MM-DD');
BEGIN
	DBMS_OUTPUT.ENABLE (buffer_size => NULL); -- Lo mismo que SET SERVEROUTPUT ON; NO SE RQUIWE 
	DELETE FROM LINEAS_FACTURAS lf ;	
	DELETE FROM FACTURAS f ;
	DELETE FROM PRODUCTOS p ;
	

	DBMS_OUTPUT.PUT_LINE('Eliminacion datos de las tablas');
	
	--PROBADO TRIGGERS
	INSERT INTO PRODUCTOS(COD_PRODUCTO, NOMBRE_PRODUCTO, PVP, TOTAL_VENDIDO) VALUES (0, 'Computador', 550, 20);
	INSERT INTO PRODUCTOS(COD_PRODUCTO, NOMBRE_PRODUCTO, PVP, TOTAL_VENDIDO) VALUES	(1, 'Teclado'   , 10, 20); 
	INSERT INTO PRODUCTOS(COD_PRODUCTO, NOMBRE_PRODUCTO, PVP, TOTAL_VENDIDO) VALUES (2, 'Impresoara', 100, 5);
	DBMS_OUTPUT.PUT_LINE('INSERT Se insertan productos 0,1 y 2');
	
	INSERT INTO FACTURAS (COD_FACTURA, FECHA, DESCRIPCION) VALUES(id_factura, TO_DATE('2022-04-21','YYYY-MM--DD'), 'POR INSERT');
	
	DBMS_OUTPUT.PUT_LINE('INSERT Se insertan factura' || id_factura);
	INSERT INTO LINEAS_FACTURAS (COD_FACTURA, COD_PRODUCTO, PVP, UNIDADES, FECHA) VALUES(id_factura, 0,NULL, 2, TO_DATE('2022-04-21','YYYY-MM-DD'));
	INSERT INTO LINEAS_FACTURAS (COD_FACTURA, COD_PRODUCTO, PVP, UNIDADES, FECHA) VALUES(id_factura, 1, NULL, 5, TO_DATE('2022-04-21','YYYY-MM-DD'));
	INSERT INTO LINEAS_FACTURAS (COD_FACTURA, COD_PRODUCTO, PVP, UNIDADES, FECHA) VALUES(id_factura, 2, NULL, 5, TO_DATE('2022-04-21','YYYY-MM-DD'));



	existe := pkg_facturas.fn_existe(id_factura);
	IF existe THEN
		DBMS_OUTPUT.PUT_LINE('EXISTE FACTURA');
		SELECT cod_factura 
		INTO id_factura 
		FROM facturas 
		WHERE ROWNUM=1
		ORDER BY cod_factura DESC;
	
		id_factura := id_factura+1;	
	ELSE
		DBMS_OUTPUT.PUT_LINE('NO EXISTE FACTURA' || id_factura);
	END IF;

	pkg_facturas.pr_alta_factura(0,SYSDATE,'FACTURA' || id_factura);
	pkg_facturas.pr_baja_factura(0);

	pkg_facturas.pr_alta_factura(id_factura,SYSDATE,'FACTURA' || id_factura);
	pkg_facturas.pr_mod_descri(id_factura, 'Nuevo valor');
	pkg_facturas.pr_mod_fecha(id_factura, fecha_original);
	registros:= pkg_facturas.fn_num_facturas(TO_DATE('2020-01-01','YYYY-HH-DD'),SYSDATE);
	DBMS_OUTPUT.PUT_LINE( registros || ' Regitros entre 2020-01-01 y ' || TO_CHAR( SYSDATE, 'YYYY-MM-DD' ));
	

	-- PROBANDO LINEA FACTURA
	

	existe := pkg_linea_facturas.fn_existe(id_factura, id_producto);
	IF existe THEN
		DBMS_OUTPUT.PUT_LINE('EXISTE LINEA');
	ELSE
		DBMS_OUTPUT.PUT_LINE('NO EXISTE LINEA');
		pkg_linea_facturas.pr_alta_linea(id_factura,id_producto,5,SYSDATE);
		pkg_linea_facturas.pr_baja_linea(id_factura,id_producto);
	
		id_producto:=id_producto+1;
	
		pkg_linea_facturas.pr_alta_linea(id_factura,id_producto,5,SYSDATE);
		pkg_linea_facturas.pr_mod_producto(id_factura, id_producto,1);
		pkg_linea_facturas.pr_mod_producto(id_factura, id_producto,SYSDATE+12);
		pkg_linea_facturas.pr_baja_linea(id_factura,id_producto);
	
	END IF;

	EXCEPTION WHEN OTHERS THEN
		 DBMS_OUTPUT.PUT_LINE('ERROR: '  || SQLCODE || ' Info: ' ||SQLERRM );
	COMMIT;
END;


SELECT * FROM FACTURAS;
SELECT * FROM PRODUCTOS p ;
SELECT * FROM LINEAS_FACTURAS lf ;





SELECT * FROM V$VERSION;
